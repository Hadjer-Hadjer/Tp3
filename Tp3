#include<stdio.h>
#include<stdlib.h>
type def struct element{
struct element*suivant;
intval;
}Element;
Element*Liste=NUUL

Liste*Créer Liste Vide(void) 
{
if(nouveau!=NULL)
{
nouveau Liste->valeur=NULL;
nouveau Liste -> suivant= NULL;
}
return nouveau;
}

void afficher Liste(Liste*L){
 if(L != NULL)
 { while(L != NULL){

  L = L->suivant}
 else
   printf("la liste est vide");
 }
}

element* chargerListe(int Tab[], int taille, element* liste) {
    for (int i = 0; i < taille; i++) {
        element* nouveau = (element*)malloc(sizeof(element));
        nouveau->valeur = Tab[i];
        nouveau->suivant = liste;
        liste = nouveau;
    }
    return Liste;
}


Element*AjouterDebut(Element*liste,intvaleur){
returnnouveau;/*Lalistepointetoujourssurlatˆete*/.
nouveau>suivant=liste;
nouveau>val=valeur;
Element*nouveau=malloc(sizeof(Element));
}

Element*SupprimerEnFin(Element*liste){
vide)*/
Element*courant=liste,*tempo;
While(courant->suivant!=NULL){
tempo=courant;
free(liste);/*Onlelib`ereetonretourneNULL(lalisteestmaintenant
}
tempo->suivant=courant->suivant;
Courant=malloc(sizeof(Element));
returnNULL;
if(liste>suivant==NULL){/*Silalistecontientunseul´el´ement*/
returnNULL;
}
free(courant);
if(liste==NULL)/*Silalisteestvide,onretourneNULL*/
Courant=courant->suivant;
returnliste;    
}

Liste*vider Liste(Liste*L){
 Liste*temp = L;
 if(L == NULL)
   printf("la liste est vide")
 else
   while(L!=NULL)
   { L = L -> suivant ;
    free(temp);
    temp = L;
   }
 }   
 return L ;
}  
 
int main() {
    int Tab[10] = {1, 3, 5, 7, 8, 10, 9, 11, 13, 20};
    element* liste = creerListe();
    liste = chargerListe(Tab, 10, liste);
    afficherListe(liste);

    liste = supprimerEnFin(liste);
    afficherListe(liste);

    liste = ajouterEnDebut(liste, 40);
    afficherListe(liste);

    viderListe(liste);
    return 0;
}
